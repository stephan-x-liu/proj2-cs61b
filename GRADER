                                     GRADER

Name of student running submit:
Login of student running submit:

Second team member's name:
Second team member's login:

Third team member's name (if any):
Third team member's login:

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
Does your program compile without errors?


Have you tested your program on the 61B lab machines?


Did you successfully implement game tree search?  Did you successfully
implement alpha-beta pruning?  Are there any limitations on it?  What is the
default number of search levels set by the one-parameter MachinePlayer
constructor (or is it a variable-depth search)?


Describe your board evaluation function in some detail.


Does your MachinePlayer use any special method of choosing the first few moves?


Is there anything else the graders should know to help them read your project?



Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).  (If you're using a list class, that should probably count as
     a separate module.)
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's comments.

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces will be worth 10% of your
grade.

Classes:
Field.java
Piece.java
Grid.java
MasterAIComputer.java #winning

public boolean Grid.isValidMove(Piece,x,y); //Returns whether or not a spot is a valid move.
public List Grid.validMoves(Piece); //Returns a list of valid moves for a given piece.
public List Grid.whitePieces(); //Returns all of the white pieces.
public List Grid.blackPieces(); //Returns all of the black pieces.
public boolean MachinePlayer.winningMove(Field); //Checks to see if there are any moves that can win.
public Field Field.left(); //Returns closest occupied field to the left or null for unoccupied. 
public Field Field.right(); //Returns closest occupied field to the right or null for unoccupied.
public Field Field.up(); //Returns closest occupied field to the above or null for unoccupied.
public Field Field.down(); //Returns closest occupied field below or null for unoccupied.
public Field Field.left_up(); //Returns closest occupied field to the left_up or null for unoccupied.
public Field Field.left_down(); //Returns closest occupied field to the left_down or null for unoccupied.
public Field Field.right_up(); //Returns closest occupied field to the right_up or null for unoccupied.
public Field Field.right_down(); //Returns closest occupied field to the right_down or null for unoccupied.
public Piece Field.item(); //Returns the piece in the field, else null.
public boolean Field.hasPiece(); //Returns whether or not there is a piece 
public String Piece.color(); //Returns color of piece.
public 










