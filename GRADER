                                     GRADER

Name of student running submit: Stephan Liu
Login of student running submit: cs61b-wf

Second team member's name: Amanda Chow
Second team member's login: cs61b-asy

Third team member's name (if any): Sebastian Merz
Third team member's login: cs61b-oa

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
Does your program compile without errors?

  Yes.

Have you tested your program on the 61B lab machines?

  Yes.

Did you successfully implement game tree search?  Did you successfully
implement alpha-beta pruning?  Are there any limitations on it?  What is the
default number of search levels set by the one-parameter MachinePlayer
constructor (or is it a variable-depth search)?

  Yes, I implemeted game tree search.

  Yes, I implemented alpha-beta pruning. The limitation is that the worst run-time is exponential run-time.

  The default number of search levels is 3.

Describe your board evaluation function in some detail.



Does your MachinePlayer use any special method of choosing the first few moves?

  No, it does not use any special methods. But, with the way we implemented the board evaluation function, MachinePlayer's first move will always be something in its goal zones.

Is there anything else the graders should know to help them read your project?



Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).  (If you're using a list class, that should probably count as
     a separate module.)
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's comments.

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces will be worth 10% of your
grade.

==================================CLASSES==================================

1.) Grid.java

      A Grid object represents a Network game board. It holds the state of every square on the board (whether it is owned by white, owned by black, or unoccupied), holds whether the game is currently accepting add or step moves, and makes appropriate changes to board when moves are made in the game.

2.) Square.java
      A Square object represents a square on the game board. It holds its location and its owner (whether it is owned by black, white, or if it is unoccupied)

3.) MachinePlayer.java


==================================MODULES==================================

1.) SETTING UP THE GRID OBJECT
      Consists of: Writing the constructors, fields, get/set methods, toString.

2.) SETTING UP THE SQUARE OBJECT
      Consists of: Writing the constructors, fields, get/set methods, toString.

3.) SETTING UP THE LIST ABSTRACT DATA TYPE
      Consists of: Writing the List and ListNode interfaces, and writing the DList, DListNode, SList, and SListNode classes.

4.) FINDING VALID MOVES
      Consists of: Determining whether a move is valid (ensuring it follows the rules of Network), finding the neighbors of a square on the board, testing all possible moves and returning the valid moves.

5.) FINDING EXISTING NETWORKS OR POTENTIAL NETWORKS

6.) PERFORMING GAME TREE SEARCH
  Consists of: (something with game tree search/abpruning)

7.) COMPUTING AN EVALUATION FUNCTION

=================================GRID MODULE=================================

IMPLEMENTED BY: Amanda Chow

CLASSES IMPLEMENTED IN:

  Grid.java

  -------------------------------Grid.java-------------------------------

  Constructor:

    public Grid()

      Takes no parameters and creates a new empty game board (where all squares on the game board are unoccupied).

  Methods:

    Square get(int x, int y)

      Returns the Square at location (x,y) on the game board. (x is horizontal axis, y is vertical). Takes in two parameters--two ints, that 

    void set(int x, int y, int color)

      Sets the Square at location (x,y) on the game board to belong to the color indicated.

    public void makeMove(Move move, int color)

      Updates the game board after a move is made according to the color (the player making the move)

    public int getGoalZones(int color)

    public Grid cloneGrid()

================================SQUARE MODULE================================

IMPLEMENTED BY: Amanda Chow

Classes Implemented In:

  Square.java

    A Square object represents a square on the game board. It holds its location and its owner (whether it is owned by black, white, or if it is unoccupied)

  -------------------------------Grid.java-------------------------------


=================================LIST MODULE=================================

IMPLEMENTED BY: (Taken from CS61B Homework)

  Classes Implemented In:

    InvalidNodeException.java
    List.java
    ListIterator.java
    ListNode.java
    SList.java
    SListNode.java

=============================VALID MOVES MODULE=============================

IMPLEMENTED BY: Amanda Chow

Classes Implemented In:

  Grid.java

===============================NETWORK MODULE===============================

IMPLEMENTED BY: Stephan Liu

Classes Implemented In:

  Grid.java
  Square.java




===========================GAME TREE SEARCH MODULE===========================

IMPLEMENTED BY: Stephan Liu

Classes Implemented In:

  MachinePlayer.java


==============================EVALUATION MODULE==============================

IMPLEMENTED BY: Sebastian Merz

Classes Implemented In:

    Grid.java
    Square.java

  -------------------------------Grid.java-------------------------------












